openapi: 3.0.1
info:
  title: BORGA
  description: "A Board Games Application"
  termsOfService: http://swagger.io/terms/
  version: 1.0.0
tags:
  - name: Board Games Application
    description: A board games personal library.
    externalDocs:
      description: Based on
      url: https://api.boardgameatlas.com/
paths:
  /api/games:
    get:
      tags:
        - Games
      summary: Find a game by query
      description: Uses Board Game Atlas API to find games by providing a query.
      parameters:
        - name: top
          in: query
          description: Query to get the top N games by popularity
          required: false
          schema:
            type: string
            example: "?top=20"
      parameters:
        - name: id
          in: query
          description: Query to get a game by ID
          required: false
          schema:
            type: string
            example: "?id=TAAifFP590"
      parameters:
        - name: name
          in: query
          description: Query to get a list of games related to the name provided
          required: false
          schema:
            type: string
            example: "?name=catan"
      responses:
        200:
          description: Game Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
        200:
          description: Games Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GamesList"
  /api/groups:
    get:
      tags:
        - Groups
      summary: Get all groups
      description: List all existing groups
      responses:
        200:
          description: Groups List
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupsList"
    get:
      tags:
        - Groups
      summary: Get group information
      description: Get a group by its ID
      parameters:
        - name: id
          in: params
          description: ID of the group to search for
          required: false
          schema:
            type: string
            example: "/groups/2"
      responses:
        200:
          description: A group has been found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
    delete:
      tags:
        - Groups
      summary: Delete a group
      description: Delete a group by its ID
      security:
      - bearerAuth: []
      parameters:
        - name: id
          in: params
          description: ID of the group to delete
          required: false
          schema:
            type: string
            example: "/groups/2"
      responses:
        200:
          description: Group Deleted
    post:
      tags:
        - Groups
      summary: Create new group
      description: Creates a new group with provided information
      security:
      - bearerAuth: []
      requestBody:
        description: Information to initialize the new group with
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupData"
      responses:
        201:
          description: Group Created
    put:
      tags: 
        - Groups
      summary: Update information about a group  
      description: Update information about an existing group
      security:
      - bearerAuth: []
      requestBody:
        description: Information to initialize the new group with
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupID"
    responses:
      200:
        description: The book is now in the collection
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookAddedResponse"
  /api/groups/games:
    post:
      tags:
        - Group Games
      summary: Add a game to a group
      description: Adds a game to a group by it's ID
      security:
      - bearerAuth: []
      parameters:
        - name: game_id
          in: query
          description: ID of the game to add to group
          required: true
          schema:
            type: string
          example: "?game_id=TAAifFP590"
      responses:
        200:
          description: Book found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookResponse"
    post:
      tags:
        - Group Games
      summary: Delete a game from a group
      description: Deletes a game from a group by it's ID
      security:
      - bearerAuth: []
      parameters:
        - name: game_id
          in: params
          description: ID of the game to remove from group
          required: true
          schema:
            type: string
          example: "?game_id=TAAifFP590"
      responses:
        200:
          description: Book found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookResponse"
  /api/users:
    post:
      tags:
        - Users
      summary: Create a new user
      description: Creates a new user with the information given
      requestBody:
        description: Information to initialize the new user with
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserData"
      responses:
        201:
          description: User Created Successfuly
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token" 
components:
  securitySchemes:
      bearerAuth:
        type: http
        scheme: bearer
  schemas:
    Token: 
      type: object
      description: An access token generated upon user creation
      properties:
        token: 
          type: string
          description: An auth token used to identify a user
          example: "3c184965-cc3e-44d5-a5b1-b36ae47819fa"
    GamesList:
      type: array
      description: A list of Games
        items:
          $ref: "#/components/schemas/Game"
    AppError:
      type: object
      description: Application error
      required:
        - internal_code
        - http_code
        - message
      properties:
        internal_code:
          type: number
          format: int32
          description: Internal error code
          example: 102
        http_code:
          type: number
          format: int32
          description: Http error code
          example: 500
        message:
          type: string
          description: Error descriptive message
          example: Could not create group
    Group:
      type: object
      description: A group of games
      required: 
        - owner
        - name
        - description
        - games
      properties: 
        owner: 
          type: string
        name:
          type: string
        description:
          type:  string
        games: 
          type: array
          items: 
            type: string
            description: Name of a game
    GroupsList:
      type: object
      description: Response with a list of groups
      properties:
        groups:
          type: array
          items:
            $ref: "#/components/schemas/Group"
    ID:
      type: object
      description: Game ID
      required:
        - id
      properties:
        id:
          type: string
          example: TAAifFP590
    Game:
      type: object
      description: Game data
      required:
        - id
        - name
        - url
        - price
        - min_age
        - min_players
        - max_players
      properties:
        id:
          type: string
          description: Game ID
          example: TAAifFP590
        name:
          type: string
          description: Game Name
          example: Root
        url:
          type: string
          description: Game link with more information
          example: https://www.boardgameatlas.com/game/TAAifFP590/root
        price:
          type: string
          description: Price of the game
          example: 47.99
        min_age:
          type: int
          description: Minimum age for this game
          format: date
          example: 10
        min_players:
          type: int
          description: Minimum players needed for this game
          example: 2
        max_players:
          type: int
          description: Maximum players for this game
          example: 4
