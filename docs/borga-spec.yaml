openapi: 3.0.1
info:
  title: BORGA
  description: "A Board Games Application"
  termsOfService: http://swagger.io/terms/
  version: 1.0.0
tags:
  - name: Board Games Application
    description: A board games personal library.
    externalDocs:
      description: Based on
      url: https://api.boardgameatlas.com/
paths:
  /api/games:
    get:
      tags:
        - Games
      summary: Find a game by query
      description: Uses Board Game Atlas API to find games by providing a query.
      parameters:
        - name: top
          in: query
          description: Query to get the top N games by popularity
          required: false
          schema:
            type: string
            example: "?top=20"
      parameters:
        - name: id
          in: query
          description: Query to get a game by ID
          required: false
          schema:
            type: string
            example: "TAAifFP590"
      parameters:
        - name: name
          in: query
          description: Query to get a list of games related to the name provided
          required: false
          schema:
            type: string
            example: "?name=catan"
      responses:
        200:
          description: A book has been found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookResponse"
        
  /api/groups:
    get:
      tags:
        - Groups
      summary: Get a group by its ID
      description: Get a group by its ID
      parameters:
        - name: id
          in: params
          description: ID of the group to search for
          required: false
          schema:
            type: string
            example: "/groups/2"
      responses:
        200:
          description: The personal list of books
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookListResponse"
    get:
      tags:
        - Groups
      summary: List all existing groups
      description: Get all groups
      responses:
        200:
          description: The personal list of books
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookListResponse"
    post:
      tags:
        - MyBooks
      summary: Add a book to the personal collection
      requestBody:
        description: Book id of a book to be added to the personal collection
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookId"
      responses:
        200:
          description: The book is now in the collection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookAddedResponse"
        400:
          description: A book with such id does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppError"
        502:
          description: Google Books API is not responding
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppError"
  /api/groups/games:
    get:
      tags:
        - MyBooks
      summary: Find book by ID in the personal collection
      description: Returns a single book
      parameters:
        - name: bookId
          in: path
          description: ID of book to return
          required: true
          schema:
            type: string
          example: Ho3JtwEACAAJ
      responses:
        200:
          description: Book found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookResponse"
        404:
          description: Book not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppError"
    delete:
      tags:
        - MyBooks
      summary: Delete book by ID
      description: Deletes a book from the personal collection
      parameters:
        - name: bookId
          in: path
          description: ID of book to delete
          required: true
          schema:
            type: string
          example: Ho3JtwEACAAJ
      responses:
        200:
          description: Book deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookId"
        404:
          description: Book not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppError"
  /api/users:
    get:
      tags:
        - MyBooks
      summary: Find book by ID in the personal collection
      description: Returns a single book
      parameters:
        - name: bookId
          in: path
          description: ID of book to return
          required: true
          schema:
            type: string
          example: Ho3JtwEACAAJ
      responses:
        200:
          description: Book found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookResponse"
        404:
          description: Book not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppError"
    delete:
      tags:
        - MyBooks
      summary: Delete book by ID
      description: Deletes a book from the personal collection
      parameters:
        - name: bookId
          in: path
          description: ID of book to delete
          required: true
          schema:
            type: string
          example: Ho3JtwEACAAJ
      responses:
        200:
          description: Book deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookId"
        404:
          description: Book not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppError"
components:
  schemas:
    AppErrorInfo:
      description: Additional information about the error
      nullable: true
      anyOf:
        - type: object
        - type: string
        - type: integer
        - type: number
      example: "..."
    AppError:
      type: object
      description: Application error
      required:
        - code
        - name
        - message
      properties:
        code:
          type: number
          format: int32
          description: Internal error code
          example: 1000
        name:
          type: string
          description: Internal error name
          example: FAIL
        message:
          type: string
          description: Error description message
          example: An error occurred
        info:
          $ref: "#/components/schemas/AppErrorInfo"
    BookAddedResponse:
      type: object
      description: Book successfully added to list
      required:
        - bookId
      properties:
        bookId:
          type: string
        added:
          type: string
          enum:
            - yes
            - no
    BookResponse:
      type: object
      description: Response with a book
      properties:
        book:
          $ref: "#/components/schemas/Book"
    BookListResponse:
      type: object
      description: Response with a list of books
      properties:
        books:
          type: array
          items:
            $ref: "#/components/schemas/Book"
    GameID:
      type: object
      description: Game ID
      required:
        - bookId
      properties:
        bookId:
          type: string
          description: Internal book id
          example: Ho3JtwEACAAJ
    Game:
      type: object
      description: Game data
      required:
        - id
        - name
        - url
        - price
        - min_age
        - min_players
        - max_players
      properties:
        id:
          type: string
          description: Game id
          example: TAAifFP590
        name:
          type: string
          description: Game name
          example: Root
        url:
          type: string
          description: Game link with more information
          example: https://www.boardgameatlas.com/game/TAAifFP590/root
        price:
          type: string
          description: Price of the game
          example: 47.99
        min_age:
          type: int
          description: Minimum age for this game
          format: date
          example: 10
        min_players:
          type: int
          description: Minimum players needed for this game
          example: 2
        max_players:
          type: int
          description: Maximum players for this game
          example: 4
